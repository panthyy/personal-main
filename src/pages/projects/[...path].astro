---
import Container from '../../components/container.astro';
import Layout from '../../layouts/main.astro';
import Header from './_header.astro';
import Footer from '../../components/footer.astro';
import ProjectCard from './_project-card.astro';
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';
import { categoryMap } from '../../content/config';
import { Image } from 'astro:assets';

type Props =
  | {
      projects: CollectionEntry<'project'>[];
      featuredProject: CollectionEntry<'project'>;
      categories: { label: string; value: string }[];
    }
  | {
      project: CollectionEntry<'project'>;
    };
export async function getStaticPaths() {
  const allProjects = await getCollection('project');

  const groupedByCategory = allProjects.reduce(
    (acc, project) => {
      const category = project.data.category;

      const path = category ? `category/${category.value}` : undefined;
      if (path) {
        const _path = path.toLowerCase();
        if (acc[_path]) {
          acc[_path].push(project);
        } else {
          acc[_path] = [project];
        }
      }
      return acc;
    },
    {} as Record<string, any[]>,
  );

  const paths: { params: { path: string | undefined }; props: Props }[] = [];

  for (const [path, projects] of Object.entries(groupedByCategory)) {
    paths.push({
      params: { path },
      props: {
        projects: projects.filter((p) => !p.data.featured),
        featuredProject: projects.find((p) => p.data.featured),
        categories: Array.from(new Set(allProjects.map((p) => p.data.category?.value))).map((c) => ({
          label: categoryMap[c],
          value: c.toLowerCase(),
        })),
      },
    });
  }

  paths.push({
    params: { path: undefined },
    props: {
      projects: allProjects.filter((p) => !p.data.featured),
      featuredProject: allProjects.find((p) => p.data.featured)!,
      categories: Array.from(new Set(allProjects.map((p) => p.data.category?.value))).map((c) => ({
        label: categoryMap[c],
        value: c.toLowerCase(),
      })),
    },
  });

  allProjects.forEach((project) => {
    paths.push({
      params: { path: project.data.title.replaceAll(' ', '-').toLowerCase() },
      props: {
        project,
      },
    });
  });

  console.log(paths);
  return paths;
}

const { path } = Astro.params;
const props = Astro.props as Props;
---

{
  'project' in props && (
    <Layout
      title="Fahad Alhatshami | Personal projects"
      description="Fahad Alhatshami's personal projects, including SaaS, eCommerce, marketplace, and social media applications."
    >
      <Container class="md:pt-0 md:px-0">
        <Image
          src={props.project.data.image}
          alt={props.project.data.title}
          class="w-full h-[50vh] object-cover min-h-[400px]"
        />
        <div class=" px-16 py-8 flex items-center justify-between">
          <div>
            <div>
              <h2>{props.project.data.title}</h2>
              <p class="mt-4">{props.project.data.description}</p>
            </div>
            {props.project.data.tags.map((tag) => (
              <span class="inline-block bg-secondary text-accent px-4 py-1 rounded-md mt-4 mr-4">{tag}</span>
            ))}
          </div>
          <div class="flex items-center gap-4 ">
            <div class="flex items-center gap-4 flex-col min-w-[200px]">
              <div>
                <p class=" text-lg font-bold">Date</p>
                <p>{new Date().toDateString()}</p>
              </div>
              <div>
                <p class=" text-lg font-bold">Date</p>
                <p>{new Date().toDateString()}</p>
              </div>
            </div>
            <div class="flex items-center gap-4 flex-col min-w-[200px]">
              <div>
                <p class="text-lg font-bold">Date</p>
                <p>{new Date().toDateString()}</p>
              </div>
              <div>
                <p class="text-lg font-bold">Date</p>
                <p>{new Date().toDateString()}</p>
              </div>
            </div>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

{
  'projects' in props && (
    <Layout
      title="Fahad Alhatshami | Personal projects"
      description="Fahad Alhatshami's personal projects, including SaaS, eCommerce, marketplace, and social media applications."
    >
      <Container class="overflow-visible md:pt-16">
        <Header transition:persist />
        <div class="flex gap-16 mt-20" id="projects-body">
          <div id="project-category-selection" class="whitespace-nowrap">
            <p class="font-semibold text-lg">Project categories</p>
            <ul class="mt-4">
              {Array.from(props.categories).map((c) => (
                <li
                  class={
                    'max-w-[240px] mt-2 w-full box-content rounded-md hover:underline transition-colors duration-200' +
                    (path && path.includes(c.value) ? ' bg-secondary text-accent' : '')
                  }
                >
                  <a href={`/projects/category/${c.value}`} class="px-4 py-3 hover:text-accent  w-full inline-block">
                    {c.label}
                  </a>
                </li>
              ))}
            </ul>
          </div>
          <div class="w-full flex flex-col gap-16">
            <ProjectCard project={props.featuredProject} full={true} />

            <div class="flex gap-8 flex-wrap w-full">
              {props.projects.map((project) => (
                <ProjectCard project={project} />
              ))}
            </div>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

<script>
  import { fadeIn } from '../../utils';

  fadeIn('projects-body', 3);
</script>
